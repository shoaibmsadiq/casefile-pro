rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }
    function requestingUserUid() {
      return request.auth.uid;
    }
    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'admin';
    }

    // --- User and Client Management ---
    match /users/{userId} {
      allow list: if isAdmin();
      allow read: if isSignedIn();
      allow create, update: if isSignedIn() && requestingUserUid() == userId;
      allow delete: if false;
    }

    match /clients/{clientId} {
      allow read: if requestingUserUid() == clientId || isAdmin();
      allow list, write: if isAdmin();
    }
    
    // --- Rule for Events (Calendar) ---
    match /users/{userId}/events/{eventId} {
      allow list, read, write: if isSignedIn() && requestingUserUid() == userId;
    }

    // --- Main Rules for Artifacts (Cases, Invoices, etc.) ---
    match /artifacts/{appId}/users/{pathOwnerId}/cases/{caseId} {

      function isCaseOwner() { return requestingUserUid() == pathOwnerId; }
      function isClientOfCase() { return isSignedIn() && resource.data.clientId == requestingUserUid(); }
      function isAssignedToCase() {
        return isSignedIn() && 
               'assignedTo' in resource.data && 
               resource.data.assignedTo is list && 
               resource.data.assignedTo.hasAny([requestingUserUid()]);
      }

      // Rules for the CASE document
      allow list, read: if isCaseOwner() || isAssignedToCase() || isClientOfCase() || isAdmin();
      allow create, delete: if isCaseOwner() || isAdmin();
      allow update: if isCaseOwner() || isAdmin() || (isAssignedToCase() && resource.data.allowAssignedToEdit == true);

      // --- Rules for the 'comments' subcollection ---
      // *** FINAL AND CORRECTED RULE ***
      match /comments/{commentId} {
        // A user can read/write a comment if their UID is in the comment's 'participants' array.
        // This is the most reliable method and avoids complex get() calls.
        allow read, write: if request.auth.uid in resource.data.participants || isAdmin();
      }

      // Rules for the 'tasks' subcollection
      match /tasks/{taskId} {
        allow read, write: if isCaseOwner() || isAssignedToCase() || isAdmin();
      }
    }

    match /artifacts/{appId}/users/{pathOwnerId}/invoices/{invoiceId} {
        allow read, list, write: if requestingUserUid() == pathOwnerId || isAdmin();
    }

    // --- Collection Group Rules ---
    match /{path=**}/cases/{caseId} {
        allow read: if isAdmin() || 
                     (isSignedIn() && 
                       (
                         request.auth.uid == resource.data.clientId ||
                         (
                           'assignedTo' in resource.data &&
                           resource.data.assignedTo is list &&
                           resource.data.assignedTo.hasAny([request.auth.uid])
                         )
                       )
                     );
    }
    
    match /{path=**}/tasks/{taskId} {
        allow read: if isAdmin() || (isSignedIn() && request.auth.uid == resource.data.assignedTo);
    }
  }
}

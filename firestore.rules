rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }
    function requestingUserUid() {
      return request.auth.uid;
    }
    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'admin';
    }

    // --- User and Client Management ---
    match /users/{userId} {
      allow list: if isAdmin();
      allow read: if isSignedIn();
      allow create, update: if isSignedIn() && requestingUserUid() == userId;
      allow delete: if false;
    }

    match /clients/{clientId} {
      allow read: if requestingUserUid() == clientId || isAdmin();
      allow list, write: if isAdmin();
    }
    
    // --- Rule for Events (Calendar) ---
    match /users/{userId}/events/{eventId} {
      allow list, read, write: if isSignedIn() && requestingUserUid() == userId;
    }

    // --- Main Rules for Artifacts (Cases, Invoices, etc.) ---
    match /artifacts/{appId}/users/{pathOwnerId}/cases/{caseId} {

      function isCaseOwner() { return requestingUserUid() == pathOwnerId; }
      function isClientOfCase(caseData) { return isSignedIn() && caseData.clientId == requestingUserUid(); }
      function isAssignedToCase(caseData) {
        return isSignedIn() && 
               'assignedTo' in caseData && 
               caseData.assignedTo is list && 
               caseData.assignedTo.hasAny([requestingUserUid()]);
      }

      // Rules for the CASE document
      allow list, read: if isCaseOwner() || isAssignedToCase(resource.data) || isClientOfCase(resource.data) || isAdmin();
      allow create, delete: if isCaseOwner() || isAdmin();
      allow update: if isCaseOwner() || isAdmin() || (isAssignedToCase(resource.data) && resource.data.allowAssignedToEdit == true);

      // --- Rules for the 'comments' subcollection ---
      match /comments/{commentId} {
        // This function gets the parent case document to check permissions.
        // This is the most robust way to handle this.
        function isParticipantOfParentCase() {
          let caseDoc = get(/databases/$(database)/documents/artifacts/$(appId)/users/$(pathOwnerId)/cases/$(caseId));
          return isCaseOwner() || isClientOfCase(caseDoc.data) || isAssignedToCase(caseDoc.data);
        }

        // READ permission is based on the parent case. This works for OLD and NEW comments.
        allow read: if isParticipantOfParentCase() || isAdmin();

        // CREATE permission checks the incoming data, which is more efficient.
        allow create: if request.auth.uid in request.resource.data.participants || isAdmin();
        
        // UPDATE/DELETE permission is based on the comment's author.
        allow update, delete: if requestingUserUid() == resource.data.authorId;
      }

      // Rules for 'tasks' subcollection
      match /tasks/{taskId} {
        allow read, write: if isCaseOwner() || isAssignedToCase(get(/databases/$(database)/documents/artifacts/$(appId)/users/$(pathOwnerId)/cases/$(caseId)).data) || isAdmin();
      }
    }

    match /artifacts/{appId}/users/{pathOwnerId}/invoices/{invoiceId} {
        allow read, list, write: if requestingUserUid() == pathOwnerId || isAdmin();
    }

    // --- Collection Group Rules ---
    match /{path=**}/cases/{caseId} {
        allow read: if isAdmin() || 
                     (isSignedIn() && 
                       (
                         request.auth.uid == resource.data.clientId ||
                         (
                           'assignedTo' in resource.data &&
                           resource.data.assignedTo is list &&
                           resource.data.assignedTo.hasAny([request.auth.uid])
                         )
                       )
                     );
    }
    
    // *** THIS RULE HAS BEEN CORRECTED ***
    // Rule for 'comments' Collection Group query
    match /{path=**}/comments/{commentId} {
        // A client can read any comment that has their UID in the `clientId` field.
        // This works for the dashboard query and is consistent.
        allow read: if request.auth.uid == resource.data.clientId || isAdmin();
    }
    
    match /{path=**}/tasks/{taskId} {
        allow read: if isAdmin() || (isSignedIn() && request.auth.uid == resource.data.assignedTo);
    }
  }
}

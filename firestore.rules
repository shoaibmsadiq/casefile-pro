rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }
    function requestingUserUid() {
      return request.auth.uid;
    }
    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'admin';
    }

    // --- User and Client Management ---
    match /users/{userId} {
      allow list: if isAdmin();
      allow read: if isSignedIn();
      allow create, update: if isSignedIn() && requestingUserUid() == userId;
      allow delete: if false;
    }

    match /clients/{clientId} {
      allow read: if requestingUserUid() == clientId || isAdmin();
      allow list, write: if isAdmin();
    }
    
    // --- Rule for Events (Calendar) ---
    match /users/{userId}/events/{eventId} {
      allow list, read, write: if isSignedIn() && requestingUserUid() == userId;
    }


    // --- Main Rules for Artifacts (Cases, Invoices, etc.) ---
    match /artifacts/{appId}/users/{pathOwnerId}/cases/{caseId} {

      // --- Helper Functions for this context ---
      function isCaseOwner() { 
        return request.auth.uid == pathOwnerId; 
      }
      function isClientOfCase() { 
        // Checks the existing document to see if the requester is the client
        return isSignedIn() && resource.data.clientId == request.auth.uid; 
      }
      function isAssignedToCase() {
        return isSignedIn() && 
               'assignedTo' in resource.data && 
               resource.data.assignedTo is list && 
               request.auth.uid in resource.data.assignedTo;
      }
      
      // === YEH FUNCTION BADLA GAYA HAI ===
      // This is a new, more reliable helper function for secure client uploads.
      function clientIsUpdatingAttachments() {
        // This function checks that:
        // 1. The user is the designated client for this case.
        // 2. The ONLY field being changed in the update is 'attachments'.
        
        // Find out which fields are being changed.
        let changedKeys = request.resource.data.diff(resource.data).affectedKeys();
        
        // Allow the update only if the user is the client AND only the 'attachments' key is being changed.
        return isClientOfCase() && changedKeys.size() == 1 && 'attachments' in changedKeys;
      }


      // --- Rules for the CASE document ---
      allow list, read: if isCaseOwner() || isAssignedToCase() || isClientOfCase() || isAdmin();
      allow create, delete: if isCaseOwner() || isAdmin();
      
      // The update rule now uses the more reliable helper function.
      allow update: if isCaseOwner() || 
                      isAdmin() || 
                      (isAssignedToCase() && resource.data.allowAssignedToEdit == true) ||
                      clientIsUpdatingAttachments();


      // Rules for 'comments' subcollection
      match /comments/{commentId} {
        function isParticipantOfParentCase() {
          let caseData = get(/databases/$(database)/documents/artifacts/$(appId)/users/$(pathOwnerId)/cases/$(caseId)).data;
          let isAssigned = 'assignedTo' in caseData && caseData.assignedTo is list && caseData.assignedTo.hasAny([requestingUserUid()]);
          return caseData.clientId == requestingUserUid() || pathOwnerId == requestingUserUid() || isAssigned;
        }
        allow read, create: if isParticipantOfParentCase() || isAdmin();
        allow update, delete: if requestingUserUid() == resource.data.authorId;
      }

      // Rules for 'tasks' subcollection
      match /tasks/{taskId} {
        allow read, write: if isCaseOwner() || isAssignedToCase() || isAdmin();
      }
    }

    // FIX 2: Added a new rule block for invoices
    match /artifacts/{appId}/users/{pathOwnerId}/invoices/{invoiceId} {
        // Only the owner of the artifacts or an admin can manage invoices.
        allow read, list, write: if requestingUserUid() == pathOwnerId || isAdmin();
    }

     // --- Collection Group Rules ---
    match /{path=**}/cases/{caseId} {
        // FIX: Added isAdmin() to allow admins to perform this query without errors.
        allow read: if isAdmin() || 
                     (isSignedIn() && 
                       (
                         request.auth.uid == resource.data.clientId ||
                         (
                           'assignedTo' in resource.data &&
                           resource.data.assignedTo is list &&
                           resource.data.assignedTo.hasAny([request.auth.uid])
                         )
                       )
                     );
    }
    // Rule for 'tasks' Collection Group query
    match /{path=**}/tasks/{taskId} {
        allow read: if isAdmin() || (isSignedIn() && request.auth.uid == resource.data.assignedTo);
    }
  }
}
